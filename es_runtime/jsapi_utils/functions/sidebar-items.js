initSidebarItems({"fn":[["call_function","call a function"],["call_function2","call a function with a rooted arguments array # Example ```rust use es_runtime::esruntimebuilder::EsRuntimeBuilder; use mozjs::jsval::{UndefinedValue, Int32Value}; use mozjs::{rooted, auto_root}; use mozjs::jsapi::{HandleValueArray, JSFunction}; use es_runtime::jsapi_utils::functions::{compile_function, call_function2}; use std::ptr; let rt = EsRuntimeBuilder::new().build(); rt.do_in_es_event_queue_sync(|sm_rt| {     sm_rt.do_with_jsapi(|_rt, cx, global| {"],["call_function_name","call a function by namespace and name"],["call_function_name2","call a function by name with a rooted arguments array"],["call_function_value","call a function by value"],["call_function_value2","call a function by value with a rooted arguments array"],["call_namespace_function_name","call a function by namespace and name"],["call_namespace_function_name2","call a function by name on an object by name e.g. esses.cleanup() can be called by calling call_namespace_function_name(cx, glob, vec![\"esses\"], \"cleanup\", vec![]);"],["compile_function","compile a function"],["define_native_constructor","define a new native function on an object"],["define_native_function","define a new native function on an object"],["new_callback","create a new callback function based on a closure # Example ```no_run use es_runtime::esruntimebuilder::EsRuntimeBuilder; use es_runtime::jsapi_utils::functions::{new_callback, call_function_name}; use crate::es_runtime::jsapi_utils::objects::NULL_JSOBJECT; use mozjs::rooted; use mozjs::jsval::{Int32Value, ObjectValue, UndefinedValue}; use log::info; let rt = EsRuntimeBuilder::new().build(); rt.eval_sync(     \"this.test_callback_func = function(cb){cb();};\",     \"test_callback.es\", ) .ok() .expect(\"eval failed\");"],["new_callback_raw","create a new callback function based on a closure"],["new_native_constructor",""],["new_native_function","define a new native function"],["object_is_function","check whether an Object is a function"],["value_is_function","check whether an Value is a function"]],"type":[["Callback","closure type which can be used to create a callback"]]});