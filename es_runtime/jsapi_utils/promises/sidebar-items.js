initSidebarItems({"fn":[["add_promise_reactions","Unforgeable, optimized version of the JS builtin Promise.prototype.then. Takes a Promise instance and onResolve, onReject callables to enqueue as reactions for that promise. In difference to Promise.prototype.then, this doesn't create and return a new Promise instance. Throws a TypeError if promise isn't a Promise (or possibly a different error if it's a security wrapper or dead object proxy). Asserts that onFulfilled and onRejected are each either callable or null."],["add_promise_reactions_callbacks","convert two closures to JSObjects and add them to the promise as reactions"],["add_promise_reactions_raw","Unforgeable, optimized version of the JS builtin Promise.prototype.then. Takes a Promise instance and onResolve, onReject callables to enqueue as reactions for that promise. In difference to Promise.prototype.then, this doesn't create and return a new Promise instance. Throws a TypeError if promise isn't a Promise (or possibly a different error if it's a security wrapper or dead object proxy). Asserts that onFulfilled and onRejected are each either callable or null."],["get_promise_result","Returns the given Promise's result: either the resolution value for fulfilled promises, or the rejection reason for rejected ones."],["get_promise_result_raw","Returns the given Promise's result: either the resolution value for fulfilled promises, or the rejection reason for rejected ones."],["get_promise_state","Returns the given Promise's state as a JS::PromiseState enum value. Returns JS::PromiseState::Pending if the given object is a wrapper that can't safely be unwrapped."],["get_promise_state_raw","Returns the given Promise's state as a JS::PromiseState enum value. Returns JS::PromiseState::Pending if the given object is a wrapper that can't safely be unwrapped."],["init_rejection_tracker","this initializes a default rejectiontracker which logs when a promise was rejected which did not have a rejection handler"],["new_promise","create a new Promise, this can be resolved later from rust"],["new_promise_with_exe","create a new Promise, this will run the executor function with 2 args (resolve, reject) this is the rust equivalent of the script `javascript new promise(function(resolve, reject){}); `"],["object_is_promise","Returns true if the given object is an unwrapped PromiseObject, false otherwise."],["object_is_promise_raw","Returns true if the given object is an unwrapped PromiseObject, false otherwise."],["reject_promise","resolve a Promise with a given rejection value"],["resolve_promise","resolve a Promise with a given resolution value"],["value_is_promise","return true if the given JSVal is a Promise"]]});