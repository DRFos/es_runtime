initSidebarItems({"fn":[["compile_script","compile a script, return a JSScript object via rval which can be executed by calling execute_script `no_run use es_runtime::jsapi_utils::scripts::{execute_script, compile_script}; use es_runtime::jsapi_utils; use mozjs::rooted; use mozjs::jsapi::JSScript; use mozjs::jsval::UndefinedValue; use std::ptr; use es_runtime::esruntimebuilder::EsRuntimeBuilder; let rt = EsRuntimeBuilder::new().build(); rt.do_in_es_event_queue_sync(|sm_rt| {     sm_rt.do_with_jsapi(|_rt, cx, _global| {         let script = \"(async function foo() {return 123;})();\";         rooted!(in (cx) let mut script_res = ptr::null_mut::<JSScript>());         let compile_res =             compile_script(cx, script, \"test_scripts.es\", script_res.handle_mut());         if let Some(err) = compile_res.err() {             panic!(\"could not compile script: {}\", err.err_msg());         }         rooted!(in (cx) let mut script_exe_res = UndefinedValue());         let exe_res = execute_script(cx, script_res.handle(), script_exe_res.handle_mut());         if let Some(err) = exe_res.err() {             panic!(\"script exe failed: {}\", err.err_msg());         }         assert!(jsapi_utils::promises::value_is_promise(             script_exe_res.handle()         ));     }); }); `"],["execute_script","execute a compiled script"]]});